{"version":3,"sources":["API/useApi.ts","ContextCalendar/CalendarContext.tsx","date.extensions.ts","logics/logics.ts","components/Day/Day.tsx","assets/image/star-green.svg","assets/image/star-gold.svg","assets/image/me-ok.svg","assets/image/me-green-ball.svg","assets/image/me-red-ball.svg","assets/image/me-steps.svg","assets/image/me-emoji-happy.svg","assets/image/me-emoji-neutral.svg","assets/image/me-emoji-sad.svg","components/Popup/Popup.tsx","components/Board/Board.tsx","assets/image/me-plus.svg","assets/image/me-minus.svg","components/Counter/Counter.tsx","components/StatusHealth/StatusHealth.tsx","components/Editor/Editor.tsx","assets/image/me-shot-arrow-left.svg","assets/image/me-shot-arrow-right.svg","components/Months/Months.tsx","assets/image/help.svg","components/HeaderButton/HeaderButton.tsx","components/Header/Header.tsx","assets/image/arrow.svg","assets/image/arrow_shot.svg","components/Help/Help.tsx","components/Modal/Modal.tsx","components/Calendar/Calendar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["statusAPI","methodAPI","MonthNames","WeekDays","options","url","method","get","params","headers","data","initialState","redCounts","greenCounts","stepCounts","amountGreenStar","amountGoldStar","CalendarContext","React","createContext","currentMonthYear","Date","getMonth","getFullYear","changeMonthYear","console","log","selectedDate","changeSelectedDate","totalState","getDraggedStar","changeGlobalState","getResaultOnDate","getStarOnMonth","setDraggedStar","whatAPI","SUCCESS","useCurrentMonthYear","useContext","CalendarContextProvider","children","useState","resaults","setResaults","curMonthYear","setCurMonthYear","toISOString","slice","currentDate","setCurrentDate","draggedStar","setUrl","isLoading","setIsLoading","responseAPI","setResponseAPI","changePartState","partialData","useEffect","LOADING","axios","then","res","startsWith","ERROR","catch","finally","config","formData","FormData","undefined","Object","keys","forEach","i","append","useFetchAPI","resaultsAPI","createQuery","month","year","temp","fromEntries","map","item","String","date","Number","redBalls","greenBalls","countSteps","greenStars","goldStars","prev","Provider","value","m","y","length","methodapi","post","dateEdit","includes","put","personID","d","typeStar","filter","reduce","acc","prototype","addDays","days","this","setDate","getDate","isToday","today","isSameDate","isInterval","n","diff","Math","round","getTime","sign","abs","isAnotherMonth","isWeekend","getDay","howGood","g","r","step","status","floor","prefixClass","transformDate","totalResault","setHours","Day","toogleModal","popupDialog","curMonth","classDay","classDate","isEditable","labelDate","className","onClick","ev","curDay","x","board","currentTarget","widthBoard","offsetParent","clientWidth","getClientRects","widthDay","width","xClient","left","yClient","top","offsetLeftBoard","parentElement","offsetLeft","offsetTopBoard","offsetTop","xCandidate","stopPropagation","event","onDragOver","preventDefault","style","backgroundColor","onDragLeave","onDrop","getPossible","possibleGreen","possibleGoldStar","isGetStar","Array","fill","ind","src","me_ok","alt","greenstar","goldstar","weightCounts","Popup","currentPosition","mood","greenBall","redBall","steps","happy","sad","neutral","height","marginRight","Board","curYear","currentData","setCurrentData","setDays","firstDay","listD","sizeBoard","cell","from","_","push","createBoardMonth","getPopUp","parseInt","day_","setRightValue","minV","maxV","isNaN","Counter","changeValue","minValue","maxValue","increment","showIncrementIcon","changeCounter","getAttribute","minus_ico","type","onChange","target","handleInput","plus_ico","StatusHealth","Editor","handleClose","editResault","setEditResault","setPartState","isActiveButClear","disabled","Months","changeMonth","prevMonth","prevYear","name","arrowLeft","arrowRight","HeaderButton","typeButton","text","isDragable","onclick","classes","help","draggable","onDragStart","Header","Help","arrow_shot","ico_arrow","Modal","isShow","toogleShow","Calendar","showModal","setShowModal","hideModal","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f7d05e2.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nexport enum statusAPI {\n  LOADING = \"LOADING\",\n  SUCCESS = \"SUCCESS\",\n  ERROR = \"ERROR\",\n}\n\nexport enum methodAPI {\n  get = \"GET\",\n  post = \"POST\",\n  put = \"PUT\",\n  delete = \"DELETE\",\n}\n\nexport interface IFetchAxios {\n  url: string;\n  method: methodAPI;\n  params: IDataAPI;\n  headers: IDataAPI;\n  data: IDataAPI;\n}\n\nexport interface IDataAPI {\n  [propName: string]: string | number | any;\n}\n\nlet options = {\n  url: \"\",\n  method: methodAPI.get,\n  params: {},\n  headers: {},\n  data: {},\n};\n\nexport const useFetchAPI = (): [IDataAPI[], Function, statusAPI] => {\n  const [url, setUrl] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<statusAPI>(statusAPI.SUCCESS);\n  const [responseAPI, setResponseAPI] = useState<IDataAPI[]>([]);\n\n  // Зміна стейту на основі даних отриманих з серверу\n  const changePartState = (partialData: IDataAPI[]): void =>\n    setResponseAPI([...responseAPI, ...partialData]);\n\n  // Зовнішя функція для Формування запиту на основі отриманих параметрів\n  const createQuery = (config: IFetchAxios): void => {\n    const formData = new FormData();\n    if (config.data !== undefined) {\n      Object.keys(config.data).forEach((i) =>\n        formData.append(i, config.data[i])\n      );\n    }\n    options = {\n      url: config.url,\n      params: config.params !== undefined ? config.params : \"\",\n      method: config.method,\n      data: config.data !== undefined ? config.data : \"\",\n      headers: {},\n      // config.data !== undefined\n      //   ? { Accept: \"application/json\", \"Content-type\": \"application/json\" }\n      //   : {},\n    };\n    setUrl(options.url);\n  };\n\n  useEffect(() => {\n    if (!url) return;\n    setIsLoading(statusAPI.LOADING);\n    axios(options)\n      .then((res) => {\n        // *****************************************\n        // Тот случай когда сервер не возвращает изменненый объект\n        // а присылает сторку по результату выполнения запроса\n        if (typeof res.data === \"string\")\n          if (res.data.startsWith(\"success\")) {\n            changePartState([options.data]);\n            setIsLoading(statusAPI.SUCCESS);\n          } else {\n            changePartState([]);\n            setIsLoading(statusAPI.ERROR);\n          }\n        // ****************************************\n        else {\n          changePartState(res.data);\n          setIsLoading(statusAPI.SUCCESS);\n        }\n      })\n      .catch(() => {\n        changePartState([]);\n        setIsLoading(statusAPI.ERROR);\n      })\n      .finally(() => setUrl(\"\"));\n  }, [url]); \n  return [responseAPI, createQuery, isLoading];\n};\n","import React from \"react\";\nimport { TypeButton } from \"../components/HeaderButton/HeaderButton\";\nimport { IDataAPI, methodAPI, statusAPI, useFetchAPI } from \"../API/useApi\";\n\n// * Limit stars on the month\nconst limitGreen: number = 21;\nconst limitGold: number = 7;\n\nexport enum MonthNames {\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n}\nexport enum WeekDays {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}\n// * Interface for item Global state\nexport interface IResault {\n  redCounts: number;\n  greenCounts: number;\n  stepCounts: number;\n  amountGreenStar: number;\n  amountGoldStar: number;\n}\n// * Interface for Global state\nexport interface IStateResaults {\n  [keyDate: string]: IResault;\n}\n// * Interface for context\ninterface ICalendar {\n  readonly currentMonthYear: [m: number, y: number]; // ? Current month and year\n  changeMonthYear: (m: number, y: number) => void; // ? Set current month and year\n  readonly selectedDate: string; // ? Selected date\n  changeSelectedDate: (d: string) => void; // ? Change selected date\n  readonly getDraggedStar: TypeButton; // ? How star dragg\n  readonly totalState: IStateResaults; // ? Global state\n  changeGlobalState: (data: IStateResaults) => void; // ? Update global State\n  getResaultOnDate: (d: string) => IResault; // ? Get data from global state on selected date\n  getStarOnMonth: (typeStar: \"amountGreenStar\" | \"amountGoldStar\") => number; // ? Get amount green | gold star in selected month\n  setDraggedStar?: (drg: TypeButton) => void; // ? set Dragged star\n  readonly whatAPI: statusAPI;\n}\n\nlet initialState: IStateResaults = {\n  \"2021-02-26\": {\n    redCounts: 3,\n    greenCounts: 7,\n    stepCounts: 1000,\n    amountGreenStar: 0,\n    amountGoldStar: 0,\n  },\n};\n// * Initial Context\nconst CalendarContext = React.createContext<ICalendar>({\n  currentMonthYear: [new Date().getMonth(), new Date().getFullYear()],\n  changeMonthYear: () => console.log(\"void\"),\n  selectedDate: \"\",\n  changeSelectedDate: () => console.log(\"void\"),\n  totalState: initialState,\n  getDraggedStar: \"\",\n  changeGlobalState: (initialState) => console.log(\"void\"),\n  getResaultOnDate: () => ({\n    redCounts: 0,\n    greenCounts: 0,\n    stepCounts: 0,\n    amountGreenStar: 0,\n    amountGoldStar: 0,\n  }),\n  getStarOnMonth: () => 0,\n  setDraggedStar: () => console.log(\"void\"),\n  whatAPI: statusAPI.SUCCESS,\n});\n// * Hook for get Context data\nexport const useCurrentMonthYear = () => {\n  return React.useContext(CalendarContext);\n};\n\nexport const CalendarContextProvider: React.FC<React.ReactNode> = ({\n  children,\n}) => {\n  // * Global state\n  const [resaults, setResaults] = React.useState<IStateResaults>(initialState);\n  // * Current month and year\n  const [curMonthYear, setCurMonthYear] = React.useState<[number, number]>([\n    new Date().getMonth(),\n    new Date().getFullYear(),\n  ]);\n  // * Selected date\n  const [currentDate, setCurrentDate] = React.useState<string>(\n    new Date().toISOString().slice(0, 10)\n  );\n  // * Dragged star\n  const [draggedStar, setDraggedStar] = React.useState<TypeButton>(\"\");\n  // * Hook for API\n  const [resaultsAPI, createQuery, isLoading] = useFetchAPI();\n  // * Set current month and year\n  const handlerCurrentMonthYear = (m: number, y: number): void => {\n    setCurMonthYear([m, y]);\n  };\n  // * Set item into Global state / API\n  const handleItemGlobalState = (data: IStateResaults): void => {\n    // setResaults((prev) => ({ ...prev, ...data }));\n    if (Object.keys(data).length === 1) {\n      let methodapi: methodAPI = methodAPI.post;\n      let dateEdit: string = Object.keys(data)[0];\n      if (Object.keys(resaults).includes(dateEdit)) methodapi = methodAPI.put;\n      let temp: IDataAPI = {\n        redBalls: Number(data[dateEdit].redCounts) || 0,\n        greenBalls: Number(data[dateEdit].greenCounts) || 0,\n        countSteps: Number(data[dateEdit].stepCounts) || 0,\n        greenStars: Number(data[dateEdit].amountGreenStar) || 0,\n        goldStars: Number(data[dateEdit].amountGoldStar) || 0,\n        date: dateEdit,\n        personID: \"60508d17f0eddc279bda88bb\",\n      };\n      createQuery({\n        url: \"https://test-beetroot.herokuapp.com/achieves\",\n        params: \"\",\n        method: methodapi,\n        data: temp,\n      });\n    }\n    setDraggedStar(\"\");\n  };\n  // * Initial state from API\n  React.useEffect(() => {\n    createQuery({\n      url:\n        \"https://test-beetroot.herokuapp.com/achieves/month/60508d17f0eddc279bda88bb\",\n      params: { month: curMonthYear[0] + 1, year: curMonthYear[1] },\n      method: methodAPI.get,\n    });\n  }, []);\n  // * Change local state\n  React.useEffect(() => {\n    if (typeof resaultsAPI === \"string\" || resaultsAPI === []) return;\n    let temp: IStateResaults = Object.fromEntries(\n      resaultsAPI.map((item) => [\n        [String(item.date)],\n        {\n          redCounts: Number(item.redBalls) || 0,\n          greenCounts: Number(item.greenBalls) || 0,\n          stepCounts: Number(item.countSteps) || 0,\n          amountGreenStar: Number(item.greenStars) || 0,\n          amountGoldStar: Number(item.goldStars) || 0,\n        },\n      ])\n    );\n    setResaults((prev) => ({ ...prev, ...temp }));\n    // handleItemGlobalState(temp);\n  }, [resaultsAPI]);\n  // * Get item Global state\n  const getResult: (d: string) => IResault = (d: string) => {\n    if (Object.keys(resaults).includes(d)) return resaults[d];\n    return {\n      redCounts: 0,\n      greenCounts: 0,\n      stepCounts: 0,\n      amountGreenStar: 0,\n      amountGoldStar: 0,\n    };\n  };\n  // * Calculate amount stars on current month\n  const getAmountStar: (\n    typeStar: \"amountGreenStar\" | \"amountGoldStar\"\n  ) => number = (typeStar) => {\n    let res = Object.keys(resaults)\n      .filter((i) => Number(i.slice(5, 7)) === curMonthYear[0] + 1)\n      .map((i) => resaults[i])\n      .reduce((acc, i) => acc + i[typeStar], 0);\n    return typeStar === \"amountGreenStar\" ? limitGreen - res : limitGold - res;\n  };\n  return (\n    <CalendarContext.Provider\n      value={{\n        currentMonthYear: curMonthYear,\n        changeMonthYear: handlerCurrentMonthYear,\n        selectedDate: currentDate,\n        changeSelectedDate: setCurrentDate,\n        totalState: resaults,\n        getDraggedStar: draggedStar,\n        changeGlobalState: handleItemGlobalState,\n        getResaultOnDate: getResult,\n        getStarOnMonth: getAmountStar,\n        setDraggedStar: setDraggedStar,\n        whatAPI: isLoading,\n      }}\n    >\n      {children}\n    </CalendarContext.Provider>\n  );\n};\n","export {};\n\ndeclare global {\n  interface Date {\n    addDays(days: number, useThis?: boolean): Date;\n    isToday(): boolean;\n    // clone(): Date;\n    isAnotherMonth(date: Date): boolean;\n    isWeekend(): boolean;\n    isSameDate(date: Date): boolean;\n    isInterval(date: Date, n: number): boolean;\n    // getStringDate(): String;\n  }\n}\n\nDate.prototype.addDays = function (days: number): Date {\n  if (!days) return this;\n  let date = this;\n  date.setDate(date.getDate() + days);\n\n  return date;\n};\n\nDate.prototype.isToday = function (): boolean {\n  let today = new Date();\n  return this.isSameDate(today);\n};\n\nDate.prototype.isInterval = function (date: Date, n: number): boolean {\n  let curDate = this;\n  let diff: number = Math.round(\n    (curDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24)\n  );\n  if (diff === 0 || Math.sign(diff) === Math.sign(n)) {\n    if (0 <= Math.abs(diff) && Math.abs(diff) <= Math.abs(n)) return true;\n  }\n  return false;\n};\n// Date.prototype.clone = function (): Date{\n//    return new Date(+this);\n// };\n\nDate.prototype.isAnotherMonth = function (date: Date): boolean {\n  return date && this.getMonth() !== date.getMonth();\n};\n\nDate.prototype.isWeekend = function (): boolean {\n  return this.getDay() === 0 || this.getDay() === 6;\n};\n\nDate.prototype.isSameDate = function (date: Date): boolean {\n  return (\n    date &&\n    this.getFullYear() === date.getFullYear() &&\n    this.getMonth() === date.getMonth() &&\n    this.getDate() === date.getDate()\n  );\n};\n\n// Date.prototype.getStringDate = function (): String {\n//     //Month names in Brazilian Portuguese\n//     let monthNames = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\n//     //Month names in English\n//     //let monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n//     let today = new Date();\n//     if (this.getMonth() == today.getMonth() && this.getDay() == today.getDay()) {\n//         return \"Hoje\";\n//         //return \"Today\";\n//     } else if (this.getMonth() == today.getMonth() && this.getDay() == today.getDay() + 1) {\n//         return \"Amanhã\";\n//         //return \"Tomorrow\";\n//     } else if (this.getMonth() == today.getMonth() && this.getDay() == today.getDay() - 1) {\n//         return \"Ontem\";\n//         //return \"Yesterday\";\n//     } else {\n//         return this.getDay() + ' de ' + this.monthNames[this.getMonth()] + ' de ' + this.getFullYear();\n//         //return this.monthNames[this.getMonth()] + ' ' + this.getDay() + ', ' +  this.getFullYear();\n//     }\n// }\n","import { IHealth } from \"../allInterfaces\";\nimport { IResault } from \"../ContextCalendar/CalendarContext\";\n\nexport const howGood = (g: number, r: number, step: number): IHealth => {\n  let res: number = 0;\n  if (g === 0 && r === 0 && step === 0) return { status: \"choose\" };\n  try {\n    if (r === 0) r = 1;\n    res = (g + Math.floor(step / 1000)) / r;\n  } catch {\n    return { status: \"choose\" };\n  }\n  if (res > 2) return { status: \"happy\" };\n  else if (res <= 1) return { status: \"sad\" };\n  else return { status: \"neutral\" };\n};\n\nexport const createBoardMonth = (m: number, y: number): Array<Date> => {\n  let firstDay: number = new Date(y, m, 1).getDay();\n  let listD: Date[] = [];\n  const sizeBoard: number =\n    firstDay + new Date(y, m + 1, 0).getDate() > 35 ? 42 : 35;\n  for (let cell in Array.from({ length: sizeBoard }, (_, i) => i)) {\n    listD.push(new Date(y, m, Number(cell) - firstDay + 1, 12, 0, 1, 0));\n  }\n  return listD;\n};\n\nexport const isDraggableDay = (d: Date): boolean => {\n  // if (d.isWeekend()) return true;\n  // return false;\n  return true;\n};\n\nexport const isGetStar = (\n  res: IResault\n): { possibleGreen: number; possibleGoldStar: number } => {\n  try {\n    const totalResault: number =\n      Math.floor(res.greenCounts / 2) +\n      Math.floor(res.stepCounts / 1000) -\n      res.redCounts;\n    return {\n      possibleGreen: Math.floor(\n        (totalResault - res.amountGreenStar * 3 - res.amountGoldStar * 9) / 3\n      ),\n      possibleGoldStar: Math.floor(res.amountGreenStar / 3),\n    };\n  } catch {\n    return { possibleGreen: 0, possibleGoldStar: 0 };\n  }\n};\n","import React from \"react\";\nimport \"./day.scss\";\nimport {\n  useCurrentMonthYear,\n  MonthNames,\n  IResault,\n  IStateResaults,\n} from \"../../ContextCalendar/CalendarContext\";\nimport \"../../date.extensions\";\nimport { howGood, isGetStar } from \"../../logics/logics\";\nimport greenstar from \"../../assets/image/star-green.svg\";\nimport goldstar from \"../../assets/image/star-gold.svg\";\nimport me_ok from \"../../assets/image/me-ok.svg\";\nimport { IPopup } from \"../../allInterfaces\";\n\ninterface IDay {\n  date: Date;\n  toogleModal: (m: number) => void;\n  popupDialog?: (data: IPopup) => void;\n  tasks?: {\n    task: string;\n  };\n}\nconst prefixClass: string = \"me-day\";\nenum WeekDays {\n  sun,\n  mon,\n  tue,\n  wed,\n  thu,\n  fri,\n  sat,\n}\n\nconst transformDate = (d: Date): string => {\n  return new Date(d.getFullYear(), d.getMonth(), d.getDate() + 1)\n    .toISOString()\n    .slice(0, 10);\n};\n\nconst totalResault = (data: IResault): number => {\n  let res: number = Math.floor(\n    Math.floor(data.greenCounts / 2) +\n      Math.floor(data.stepCounts / 1000) -\n      data.redCounts -\n      data.amountGreenStar * 3 -\n      data.amountGoldStar * 9\n  );\n  return res > 0 ? res : 0;\n};\nconst today: Date = new Date(new Date().setHours(12, 0, 0, 0));\n\nexport const Day: React.FC<IDay> = ({ date, toogleModal, popupDialog }) => {\n  // * Hooks for get current date and data\n  const {\n    currentMonthYear: [curMonth],\n    changeSelectedDate,\n    getResaultOnDate,\n    getDraggedStar,\n    changeGlobalState,\n  } = useCurrentMonthYear();\n  // * Get resaults on this day\n  const res: IResault = getResaultOnDate(transformDate(date));\n  // * Create Class CSS for this day\n  const classDay: string = `${prefixClass} ${WeekDays[date.getDay()]} ${\n    howGood(res.greenCounts, res.redCounts, res.stepCounts).status\n  }`;\n  // * Craete class for date\n  const classDate: string = `${prefixClass}__date${\n    date.isToday() ? \" today\" : \"\"\n  }${date.getMonth() === curMonth ? \"\" : \" another\"}`;\n  // * Is editable day\n  const isEditable: boolean = date.isInterval(today, -2);\n  // * Show/hide modal\n  const showMd = (): void => {\n    toogleModal(1);\n    changeSelectedDate(transformDate(date));\n  };\n  // * Add name month to 1st day next month\n  const labelDate: string = `${date.getDate()} ${\n    date.getMonth() > curMonth && date.getDate() === 1\n      ? MonthNames[date.getMonth() === 11 ? 0 : date.getMonth()].slice(0, 3)\n      : \"\"\n  }`;\n  // * Change background when drag element above\n  const starOnCard = (ev: React.DragEvent): void => {\n    ev.preventDefault();\n    if (ev.currentTarget.parentElement)\n      ev.currentTarget.parentElement.style.backgroundColor =\n        \"rgba(87, 148, 116, 0.08)\";\n  };\n  // * Back to old background\n  const endOnCard = (ev: React.DragEvent): void => {\n    if (ev.currentTarget.parentElement)\n      ev.currentTarget.parentElement.style.backgroundColor = \"#FFFFFF\";\n  };\n  // * Add star to Global state\n  const setStar = (ev: React.DragEvent): void => {\n    if (ev.currentTarget.parentElement)\n      ev.currentTarget.parentElement.style.backgroundColor = \"#FFFFFF\";\n    const getPossible = isGetStar(res);\n    if (getDraggedStar === \"greenstar\" && getPossible.possibleGreen > 0) {\n      let data: IResault = { ...res, amountGreenStar: res.amountGreenStar + 1 };\n      let temp: IStateResaults = { [transformDate(date)]: data };\n      changeGlobalState(temp);\n      return;\n    }\n    if (getDraggedStar === \"goldstar\" && getPossible.possibleGoldStar > 0) {\n      let data: IResault = {\n        ...res,\n        amountGreenStar: res.amountGreenStar - 3,\n        amountGoldStar: res.amountGoldStar + 1,\n      };\n      let temp: IStateResaults = { [transformDate(date)]: data };\n      changeGlobalState(temp);\n      return;\n    }\n  };\n\n  const handlerHover = (ev: React.MouseEvent): void => {\n    if (popupDialog)\n      popupDialog({\n        curDay: \"\",\n        x: 0,\n        y: 0,\n      });\n    let board = ev.currentTarget as HTMLDivElement;\n    const widthPopup = 285;\n    // ! Need adaptive Y\n    let widthBoard = board.offsetParent?.clientWidth || 0;\n    // let heightBoard = board.offsetParent?.clientHeight || 0;\n    const {\n      width: widthDay,\n      // height: heightDay,\n      left: xClient,\n      top: yClient,\n    } = board.getClientRects()[0];\n    let offsetLeftBoard = board.parentElement?.offsetLeft || 0;\n    let offsetTopBoard = board.parentElement?.offsetTop || 0;\n    let xCandidate = xClient + widthDay + 15 - offsetLeftBoard;\n    if (xCandidate + widthPopup > widthBoard) {\n      xCandidate = xClient - 15 - widthPopup - offsetLeftBoard;\n    }\n    if (popupDialog)\n      popupDialog({\n        curDay: transformDate(date),\n        x: xCandidate,\n        y: yClient - offsetTopBoard,\n      });\n      ev.stopPropagation();\n  };\n  return (\n    <div\n      className={classDay}\n      onClick={handlerHover}\n    >\n      <div className={classDate}>{labelDate}</div>\n      {isEditable && (\n        <div\n          className={`${prefixClass}__update`}\n          onClick={(event: React.MouseEvent) => {\n            event.stopPropagation();\n            showMd();\n          }}\n        >\n          Update\n        </div>\n      )}\n      <div\n        className=\"me-day__body\"\n        onDragOver={starOnCard}\n        onDragLeave={endOnCard}\n        onDrop={setStar}\n      >\n        {res.greenCounts > 0 &&\n          Array(totalResault(res))\n            .fill(\"\")\n            .map((i, ind) => <img src={me_ok} alt=\"!\" key={ind} />)}\n        {res.amountGreenStar > 0 &&\n          Array(res.amountGreenStar)\n            .fill(\"\")\n            .map((i, ind) => <img src={greenstar} alt=\"\" key={ind} />)}\n        {res.amountGoldStar > 0 &&\n          Array(res.amountGoldStar)\n            .fill(\"\")\n            .map((i, ind) => <img src={goldstar} alt=\"\" key={ind} />)}\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/star-green.d4309c7e.svg\";","export default __webpack_public_path__ + \"static/media/star-gold.01734bf5.svg\";","export default __webpack_public_path__ + \"static/media/me-ok.48210cbc.svg\";","export default __webpack_public_path__ + \"static/media/me-green-ball.58120cf5.svg\";","export default __webpack_public_path__ + \"static/media/me-red-ball.3b9177e5.svg\";","export default __webpack_public_path__ + \"static/media/me-steps.bd9538c6.svg\";","export default __webpack_public_path__ + \"static/media/me-emoji-happy.06deaf39.svg\";","export default __webpack_public_path__ + \"static/media/me-emoji-neutral.a5076e4f.svg\";","export default __webpack_public_path__ + \"static/media/me-emoji-sad.9e74c644.svg\";","import React from \"react\";\nimport \"./popup.scss\";\nimport CSS from \"csstype\";\nimport {\n  useCurrentMonthYear,\n  IResault,\n} from \"../../ContextCalendar/CalendarContext\";\nimport { howGood } from \"../../logics/logics\";\nimport { IHealth, IPopup } from \"../../allInterfaces\";\nimport greenBall from \"../../assets/image/me-green-ball.svg\";\nimport redBall from \"../../assets/image/me-red-ball.svg\";\nimport steps from \"../../assets/image/me-steps.svg\";\nimport happy from \"../../assets/image/me-emoji-happy.svg\";\nimport neutral from \"../../assets/image/me-emoji-neutral.svg\";\nimport sad from \"../../assets/image/me-emoji-sad.svg\";\n\nconst weightCounts = (n: number): string => `${n > 0 ? \"active\" : \"\"}`;\n\nexport const Popup: React.FC<{ data: IPopup }> = ({ data }) => {\n  const { getResaultOnDate } = useCurrentMonthYear();\n\n  const currentPosition: CSS.Properties = {\n    top: `${data.y}px`,\n    left: `${data.x}px`,\n  };\n\n  // * Get resaults on this day\n  const res: IResault = getResaultOnDate(data.curDay);\n  // * Choose emoji\n  const mood: IHealth = howGood(res.greenCounts, res.redCounts, res.stepCounts);\n  // * Upper last icon emoji\n  const styleEmoji: CSS.Properties = {\n    height: \"24px\",\n    width: \"24px\",\n    marginRight: \"6px\",\n  };\n\n  if (data.curDay.length < 10) return null;\n  return (\n    <div className=\"me-popup\" style={currentPosition}>\n      <div className=\"me-popup__line\">\n        <img src={greenBall} alt=\"o\" />\n        <span className={weightCounts(res.greenCounts)}>{res.greenCounts}</span>\n        natural foods eaten\n      </div>\n      <div className=\"me-popup__line\">\n        <img src={redBall} alt=\"o\" />\n        <span className={weightCounts(res.redCounts)}>{res.redCounts}</span>\n        non-natural foods eaten\n      </div>\n      <div className=\"me-popup__line\">\n        <img src={steps} alt=\"o\" />\n        <span className={weightCounts(res.stepCounts)}>{res.stepCounts}</span>\n        steps done\n      </div>\n      <div className=\"me-popup__line\">\n        <img\n          src={\n            mood.status === \"happy\"\n              ? happy\n              : mood.status === \"sad\"\n              ? sad\n              : neutral\n          }\n          alt=\"o\"\n          style={styleEmoji}\n        />\n        <span className={`${mood.status === \"choose\" ? \"\" : \"active\"}`}>\n          {mood.status}\n        </span>\n        mood\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Day } from \"../Day/Day\";\nimport \"./board.scss\";\nimport {\n  useCurrentMonthYear,\n  WeekDays,\n} from \"../../ContextCalendar/CalendarContext\";\nimport { Popup } from \"../Popup/Popup\";\nimport { IPopup } from \"../../allInterfaces\";\nimport { createBoardMonth } from \"../../logics/logics\";\nimport { statusAPI } from \"../../API/useApi\";\n\nexport const Board: React.FC<{ toogleModal: (m: number) => void }> = ({\n  toogleModal,\n}) => {\n  const {\n    currentMonthYear: [curMonth, curYear],\n    whatAPI,\n  } = useCurrentMonthYear();\n  const [currentData, setCurrentData] = React.useState<IPopup>({\n    curDay: \"\",\n    x: 0,\n    y: 0,\n  });\n  const [days, setDays] = React.useState<Date[]>([]);\n\n  React.useEffect(() => {\n    setDays(createBoardMonth(curMonth, curYear));\n    setCurrentData({ curDay: \"\", x: 0, y: 0 });\n  }, [curMonth, curYear]);\n  // * Change columns amount\n  const sizeBoard: string = `m-board ${days.length > 35 ? \"large\" : \"\"}`;\n\n  const getPopUp = (data: IPopup): void => {\n    if (data.curDay === currentData.curDay)\n      setCurrentData({ curDay: \"\", x: 0, y: 0 });\n    else setCurrentData(data);\n  };\n\n  return (\n    <div className={sizeBoard}>\n      {}\n      {Object.keys(WeekDays)\n        .filter((x) => !(parseInt(x) >= 0))\n        .map((_, i) => (\n          <div className=\"m-board__weekdays\" key={i}>\n            {whatAPI === statusAPI.LOADING && i === 3 && <h4>Loading...</h4>}\n            {whatAPI === statusAPI.ERROR && i === 3 && <h4>Error API</h4>}\n            {whatAPI === statusAPI.SUCCESS && WeekDays[i]}\n          </div>\n        ))}\n      {days.map((day_, ind) => (\n        <Day\n          date={day_}\n          key={ind}\n          toogleModal={toogleModal}\n          popupDialog={getPopUp}\n        />\n      ))}\n      {currentData.curDay.length > 0 && <Popup data={currentData} />}\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/me-plus.89ada8c2.svg\";","export default __webpack_public_path__ + \"static/media/me-minus.ef2bda19.svg\";","import React from \"react\";\nimport \"./counter.scss\";\nimport plus_ico from \"../../assets/image/me-plus.svg\";\nimport minus_ico from \"../../assets/image/me-minus.svg\";\n\ninterface ICounter {\n  value: number;\n  changeValue: (n: number) => void;\n  minValue?: number;\n  maxValue?: number;\n  increment?: number;\n  showIncrementIcon?: boolean;\n}\n\nconst setRightValue = (n: number, minV: number, maxV: number): number => {\n  if (Number.isNaN(Number(n))) return 0;\n  if (n >= minV && n <= maxV) return n;\n  else if (n < minV) return minV;\n  else return maxV;\n};\n\nexport const Counter: React.FC<ICounter> = ({\n  value = 0,\n  changeValue,\n  minValue = 0,\n  maxValue = 100,\n  increment = 1,\n  showIncrementIcon = true,\n}) => {\n  // ? Set value used keyboard\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    changeValue(setRightValue(Number(event.target.value), minValue, maxValue));\n  };\n  // ? Set value used button plus/minus\n  const changeCounter = (event: React.MouseEvent<HTMLImageElement>): void => {\n    changeValue(\n      setRightValue(\n        event.currentTarget.getAttribute(\"alt\") === \"-\"\n          ? value - increment\n          : value + increment,\n        minValue,\n        maxValue\n      )\n    );\n    event.preventDefault();\n  };\n\n  return (\n    <div className=\"m-counter\">\n      <div className=\"m-counter__wrapper\">\n        {showIncrementIcon && (\n          <img\n            src={minus_ico}\n            alt=\"-\"\n            onClick={(event) => changeCounter(event)}\n          />\n        )}\n        <input\n          className=\"m-counter__input\"\n          type=\"number\"\n          step={increment}\n          value={value}\n          onChange={(event) => handleInput(event)}\n        />\n        {showIncrementIcon && (\n          <img\n            src={plus_ico}\n            alt=\"+\"\n            onClick={(event) => changeCounter(event)}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./statushealth.scss\";\nimport { IHealth } from \"../../allInterfaces\";\nimport happy from \"../../assets/image/me-emoji-happy.svg\";\nimport neutral from \"../../assets/image/me-emoji-neutral.svg\";\nimport sad from \"../../assets/image/me-emoji-sad.svg\";\n\nexport const StatusHealth: React.FC<IHealth> = ({ status = \"choose\" }) => {\n  return (\n    <div className=\"m-status\">\n      <div className={`m-status__line${status === \"happy\" ? \" active\" : \"\"}`}>\n        <img src={happy} alt=\"\" />\n      </div>\n      <div className={`m-status__line${status === \"neutral\" ? \" active\" : \"\"}`}>\n        <img src={neutral} alt=\"\" />\n      </div>\n      <div className={`m-status__line${status === \"sad\" ? \" active\" : \"\"}`}>\n        <img src={sad} alt=\"\" />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./editor.scss\";\nimport { howGood } from \"../../logics/logics\";\n\nimport {\n  useCurrentMonthYear,\n  IResault,\n  // IStateResaults,\n} from \"../../ContextCalendar/CalendarContext\";\nimport { Counter } from \"../Counter/Counter\";\nimport { StatusHealth } from \"../StatusHealth/StatusHealth\";\n// import { IDataAPI, methodAPI, useFetchAPI } from \"../../API/useApi\";\n\nexport const Editor: React.FC<{ handleClose: () => void }> = ({\n  handleClose,\n}) => {\n  const {\n    selectedDate,\n    getResaultOnDate,\n    changeGlobalState,\n  } = useCurrentMonthYear();\n\n  const res: IResault = getResaultOnDate(selectedDate);\n  const [editResault, setEditResault] = React.useState<IResault>(res);\n  // const [data, createQuery, isLoading] = useFetchAPI();\n\n  React.useEffect(() => {\n    setEditResault((prev) => ({ ...prev, ...res }));\n  }, [selectedDate]);\n\n  const setPartState = (partialData: {\n    [propName: string]: string | number;\n  }): void => setEditResault((prev) => ({ ...prev, ...partialData }));\n\n  const isActiveButClear: boolean =\n    res.greenCounts !== editResault.greenCounts ||\n    res.redCounts !== editResault.redCounts ||\n    res.stepCounts !== editResault.stepCounts\n      ? true\n      : false;\n  // ? Clear data in input\n  const handlerClear = (): void =>\n    setEditResault((prev: IResault) => ({\n      ...prev,\n      ...res,\n    }));\n\n  const handleEditData = (): void => {\n    // let temp: IDataAPI = {\n    //   redCounts: Number(editResault.redCounts) || 0,\n    //   greenCounts: Number(editResault.greenCounts) || 0,\n    //   stepCounts: Number(editResault.stepCounts) || 0,\n    //   amountGreenStar: Number(editResault.amountGreenStar) || 0,\n    //   amountGoldStar: Number(editResault.amountGoldStar) || 0,\n    //   date: selectedDate,\n    //   personID: \"60508d17f0eddc279bda88bb\",\n    // };\n\n    // let ed: boolean =\n    //   res.amountGoldStar === 0 &&\n    //   res.amountGreenStar === 0 &&\n    //   res.greenCounts === 0 &&\n    //   res.redCounts === 0 &&\n    //   res.stepCounts === 0;\n    // if (\n    //   res.amountGoldStar !== editResault.amountGoldStar ||\n    //   res.amountGreenStar !== editResault.amountGreenStar ||\n    //   res.greenCounts !== editResault.greenCounts ||\n    //   res.redCounts !== editResault.redCounts ||\n    //   res.stepCounts !== editResault.stepCounts\n    // ) {\n    //   console.log('start fetch');\n      \n    //   createQuery({\n    //     urlAppendix: \"\",\n    //     params: \"\",\n    //     method: ed ? methodAPI.post : methodAPI.put,\n    //     data: temp,\n    //   });\n    // }\n    // console.log(\"editor\", ed, temp);\n\n    changeGlobalState({ [selectedDate]: editResault });\n    handleClose();\n  };\n  return (\n    <div className=\"m-editor\">\n      <button\n        onClick={handlerClear}\n        className=\"m-editor__clear-button\"\n        disabled={!isActiveButClear}\n      >\n        Clear all\n      </button>\n      <span></span>\n      <label>Date</label>\n      <div className=\"m-editor__date\">\n        <div className=\"m-editor__date-text\">\n          {`${selectedDate.slice(8, 10)}.${selectedDate.slice(\n            5,\n            7\n          )}.${selectedDate.slice(0, 4)}`}\n        </div>\n      </div>\n      <label>Green counts</label>\n      <Counter\n        value={editResault.greenCounts}\n        changeValue={(n: number) => setPartState({ greenCounts: n })}\n      />\n      <label>Red counts</label>\n      <Counter\n        value={editResault.redCounts}\n        changeValue={(n: number) => setPartState({ redCounts: n })}\n      />\n      <label>Steps counts</label>\n      <Counter\n        value={editResault.stepCounts}\n        changeValue={(n: number) => setPartState({ stepCounts: n })}\n        increment={10}\n        showIncrementIcon={false}\n        maxValue={30000}\n      />\n      <label>Your feelings</label>\n      <StatusHealth\n        status={\n          howGood(\n            editResault.greenCounts,\n            editResault.redCounts,\n            editResault.stepCounts\n          ).status\n        }\n      />\n      <div className=\"m-editor__control\">\n        <button className=\"m-cancel _icon-close-small\" onClick={handleClose}>\n          Cancel\n        </button>\n        <button\n          className=\"m-save _icon-ok-small\"\n          disabled={!isActiveButClear}\n          onClick={handleEditData}\n        >\n          Save\n        </button>\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/me-shot-arrow-left.6e35df5d.svg\";","export default __webpack_public_path__ + \"static/media/me-shot-arrow-right.56ce3577.svg\";","import React from \"react\";\nimport {\n  useCurrentMonthYear,\n  MonthNames,\n} from \"../../ContextCalendar/CalendarContext\";\nimport \"./months.scss\";\nimport arrowLeft from \"../../assets/image/me-shot-arrow-left.svg\";\nimport arrowRight from \"../../assets/image/me-shot-arrow-right.svg\";\n\nexport const Months: React.FC = () => {\n  const {\n    currentMonthYear,\n    changeMonthYear,\n  } = useCurrentMonthYear();\n\n  const changeMonth = (ev: React.MouseEvent<HTMLButtonElement>): void => {\n    let prevMonth: number = currentMonthYear[0],\n      prevYear: number = currentMonthYear[1];\n    if (ev.currentTarget.name === \"prev\") {\n      changeMonthYear(\n        prevMonth === 0 ? 10 : prevMonth - 1,\n        prevMonth === 0 ? prevYear - 1 : prevYear\n      );\n    } else {\n      changeMonthYear(\n        prevMonth === 10 ? 0 : prevMonth + 1,\n        prevMonth === 10 ? prevYear + 1 : prevYear\n      );\n    }\n  };\n\n  return (\n    <div className=\"m-month\">\n      <button className=\"m-month__next\" name=\"prev\" onClick={changeMonth}>\n        <img src={arrowLeft} alt=\"<\" />\n      </button>\n      <div className=\"m-month__name\">{`${MonthNames[currentMonthYear[0]]} ${\n        currentMonthYear[1]\n      }`}</div>\n      <button className=\"m-month__next\" name=\"next\" onClick={changeMonth}>\n        <img src={arrowRight} alt=\">\" />\n      </button>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/help.b5b60e18.svg\";","import React from \"react\";\nimport \"./headerbutton.scss\";\nimport greenstar from \"../../assets/image/star-green.svg\";\nimport goldstar from \"../../assets/image/star-gold.svg\";\nimport help from \"../../assets/image/help.svg\";\nimport { useCurrentMonthYear } from \"../../ContextCalendar/CalendarContext\";\n\nexport type TypeButton = \"greenstar\" | \"goldstar\" | \"help\" | \"text\" | \"\";\ninterface IButtonHeader {\n  typeButton: TypeButton;\n  text: string;\n  isDragable?: boolean;\n  onclick?: () => void;\n}\n\nexport const HeaderButton: React.FC<IButtonHeader> = ({\n  typeButton,\n  text = \"\",\n  isDragable = false,\n  onclick,\n}) => {\n  const { setDraggedStar } = useCurrentMonthYear();\n  const classes: string = `me-header-button ${typeButton}`;\n\n  const dragStarHandler = (): void => {\n    if (setDraggedStar) {\n      setDraggedStar(typeButton);\n    }\n  };\n\n  return (\n    <div className={classes} onClick={onclick}>\n      {typeButton !== \"text\" && (\n        <img\n          className={`${isDragable ? \"grabbable\" : \"\"}`}\n          src={\n            typeButton === \"greenstar\"\n              ? greenstar\n              : typeButton === \"goldstar\"\n              ? goldstar\n              : help\n          }\n          alt=\"\"\n          draggable={isDragable}\n          onDragStart={dragStarHandler}\n        />\n      )}\n      {text.length > 0 && <label>{text}</label>}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./header.scss\";\nimport { Months } from \"../Months/Months\";\nimport { HeaderButton } from \"../HeaderButton/HeaderButton\";\nimport { useCurrentMonthYear } from \"../../ContextCalendar/CalendarContext\";\nimport { isDraggableDay } from \"../../logics/logics\";\n\nexport const Header: React.FC<{ toogleModal: (m: number) => void }> = ({\n  toogleModal,\n}) => {\n  const { changeMonthYear, getStarOnMonth } = useCurrentMonthYear();\n  // * Set today\n  const setToday = (): void => {\n    changeMonthYear(new Date().getMonth(), new Date().getFullYear());\n    \n  };\n  //  * Show help modal\n  const showHelp = (): void => toogleModal(2);\n\n  return (\n    <div className=\"m-header\">\n      <Months />\n      <div className=\"m-wrapper\">\n        <HeaderButton\n          typeButton=\"greenstar\"\n          text={`${getStarOnMonth(\"amountGreenStar\")}`}\n          isDragable={isDraggableDay(new Date())}\n        />\n        <HeaderButton\n          typeButton=\"goldstar\"\n          text={`${getStarOnMonth(\"amountGoldStar\")}`}\n          isDragable={isDraggableDay(new Date())}\n        />\n        <HeaderButton typeButton=\"help\" text={\"\"} onclick={showHelp} />\n        <HeaderButton typeButton=\"text\" text={\"Today\"} onclick={setToday} />\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/arrow.7341b856.svg\";","export default __webpack_public_path__ + \"static/media/arrow_shot.9ad6df22.svg\";","import React from \"react\";\nimport \"./help.scss\";\nimport greenBall from \"../../assets/image/me-green-ball.svg\";\nimport redBall from \"../../assets/image/me-red-ball.svg\";\nimport steps from \"../../assets/image/me-steps.svg\";\nimport greenstar from \"../../assets/image/star-green.svg\";\nimport goldstar from \"../../assets/image/star-gold.svg\";\nimport me_ok from \"../../assets/image/me-ok.svg\";\nimport ico_arrow from \"../../assets/image/arrow.svg\";\nimport arrow_shot from \"../../assets/image/arrow_shot.svg\";\n\nexport const Help: React.FC = () => {\n  return (\n    <div className=\"me-help\">\n      <div className=\"me-help__title\">Explanation</div>\n      <div className=\"me-help__section-title\">\n        How do I achieve a check mark?\n      </div>\n      <div className=\"me-help__section-images\">\n        <img src={greenBall} alt=\"\" />\n        <img src={arrow_shot} alt=\"\" className=\"small\" />\n        <span>2</span>\n        <img src={ico_arrow} alt=\"\" className=\"small\" />\n        <img src={me_ok} alt=\"\" />\n      </div>\n\n      <div className=\"me-help__section-text\">\n        Get 2 Green counts a day and earn green check mark\n      </div>\n      <div className=\"me-help__section-images\">\n        <img src={steps} alt=\"\" />\n        <img src={arrow_shot} alt=\"\" className=\"small\" />\n        <span>1000</span>\n        <img src={ico_arrow} alt=\"\" className=\"small\" />\n        <img src={me_ok} alt=\"\" />\n      </div>\n\n      <div className=\"me-help__section-text\">\n        Get 1000 steps and earn green check mark\n      </div>\n      <div className=\"me-help__section-images\">\n        <img src={redBall} alt=\"\" />\n        <img src={arrow_shot} alt=\"\" className=\"small\" />\n        <span>1</span>\n        <img src={ico_arrow} alt=\"\" className=\"small\" />\n        (\n        <img src={me_ok} alt=\"\" />)\n      </div>\n      <div className=\"me-help__section-text\">\n        Get 1 Red counts a day and lost green check mark\n      </div>\n\n      <div className=\"me-help__section-title\">How do I achive a star?</div>\n      <div className=\"me-help__section-images\">\n        <img src={me_ok} alt=\"\" />\n        <img src={me_ok} alt=\"\" />\n        <img src={me_ok} alt=\"\" />\n        <img src={ico_arrow} alt=\"\" className=\"small\" />\n        <img src={greenstar} alt=\"\" className=\"greenstar\" />\n      </div>\n      <div className=\"me-help__section-text\">\n        Get 3 green check marks a day - add a green star to your calendar\n      </div>\n\n      <div className=\"me-help__section-title\">How do I achive a gold star?</div>\n      <div className=\"me-help__section-images\">\n        <div>\n          <img src={greenstar} alt=\"\" className=\"greenstar\" />\n          <img src={greenstar} alt=\"\" className=\"greenstar\" />\n          <img src={greenstar} alt=\"\" className=\"greenstar\" />\n        </div>\n        <img src={ico_arrow} alt=\"\" className=\"small\" />\n        <img src={goldstar} alt=\"\" className={Object.keys({ goldstar })[0]} />\n      </div>\n      <div className=\"me-help__section-text\">\n        Get 3 green stars - add a gold star to your calendar\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./modal.scss\";\n\ninterface IModal {\n  handleClose: () => void;\n  isShow: boolean;\n  children: React.ReactNode;\n}\n\nexport const Modal: React.FC<IModal> = ({ handleClose, isShow, children }) => {\n  const toogleShow: string = isShow ? \"m-modal show\" : \"m-modal hide\";\n  return (\n    <div className={toogleShow}>\n      <section className=\"m-modal__main\">\n        {children}\n        <button onClick={handleClose}>&#10005;</button>\n      </section>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { CalendarContextProvider } from \"../../ContextCalendar/CalendarContext\";\nimport { Board } from \"../Board/Board\";\nimport { Editor } from \"../Editor/Editor\";\nimport { Header } from \"../Header/Header\";\nimport { Help } from \"../Help/Help\";\nimport { Modal } from \"../Modal/Modal\";\nimport \"./calendar.scss\";\n\nexport const Calendar: React.FC = () => {\n  const [showModal, setShowModal] = React.useState<number>(0);\n  const hideModal = () => {\n    setShowModal(0);\n  };\n\n  return (\n    <div className=\"m-calendar\">\n      <div className=\"main-wrapper\">\n        <CalendarContextProvider>\n          <Header toogleModal={setShowModal} />\n          <Board toogleModal={setShowModal} />\n          <Modal\n            isShow={!!showModal}\n            handleClose={hideModal}\n            children={\n              showModal === 1 ? <Editor handleClose={hideModal} /> : <Help />\n            }\n          />\n        </CalendarContextProvider>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Calendar } from './components/Calendar/Calendar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}